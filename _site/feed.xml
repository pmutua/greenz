<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-06-26T09:39:43+03:00</updated><id>http://localhost:4000/</id><title type="html">Philip Mutua</title><subtitle>Building solutions with technology.
</subtitle><author><name>philip mutua</name><email>pmutua@live.com</email></author><entry><title type="html"></title><link href="http://localhost:4000/2018/06/26/2018-07-06-How-to-Install-and-Configure-GitLab-on-Ubuntu-16.04/" rel="alternate" type="text/html" title="" /><published>2018-06-26T09:39:43+03:00</published><updated>2018-06-26T09:39:43+03:00</updated><id>http://localhost:4000/2018/06/26/2018-07-06-How-%20to-%20Install-and-%20Configure%20-GitLab-%20-on%20-Ubuntu-%2016.04</id><content type="html" xml:base="http://localhost:4000/2018/06/26/2018-07-06-How-to-Install-and-Configure-GitLab-on-Ubuntu-16.04/">&lt;p&gt;GitLab is available in four editions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gitlab CE (Community Edition) - self-hosted, free and support from the Community forum.&lt;/li&gt;
  &lt;li&gt;Gitlab EE (Enterprise Edition) - self-hosted, paid app, comes with additional features.&lt;/li&gt;
  &lt;li&gt;GitLab.com - SaaS, free.&lt;/li&gt;
  &lt;li&gt;GitLab.io - Private GitLab instance managed by GitLab Inc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, I will show you step-by-step how to install GitLab CE (Community Edition) on your own Ubuntu 16.04 Xenial Xerus server. In this tutorial, I will be using the ‘omnibus’ package provided by GitLab for easy installation.&lt;/p&gt;

&lt;h1 id=&quot;what-we-will-do&quot;&gt;What we will do:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Install Packages&lt;/li&gt;
  &lt;li&gt;Install GitLab&lt;/li&gt;
  &lt;li&gt;Configure GitLab URL&lt;/li&gt;
  &lt;li&gt;Generate SSL Let’s encrypt and DHPARAM Certificate&lt;/li&gt;
  &lt;li&gt;Enable Nginx HTTPS for GitLab&lt;/li&gt;
  &lt;li&gt;Configure UFW Firewall&lt;/li&gt;
  &lt;li&gt;Perform the GitLab Installation&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 16.04 Server - 64bit&lt;/li&gt;
  &lt;li&gt;Min RAM 2GB&lt;/li&gt;
  &lt;li&gt;Root Privileges&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1---install-required-ubuntu-packages&quot;&gt;Step 1 - Install required Ubuntu Packages&lt;/h1&gt;

&lt;p&gt;The first step is to install the packages needed for the GitLab installation. Please log in to the server as root user and upddate the Ubuntu repository.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@GitLabServer
apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now install the packages including curl for downloading the GitLab repository, ca-certificates, and postfix for the SMTP configuration.&lt;/p&gt;

&lt;p&gt;Install all packages with the apt command below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install curl openssh-server ca-certificates postfix&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;During postfix installation, you will be prompted about the configuration, select ‘Internet Site’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-1.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and then enter the server domain name that shall be used for sending an email.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-2.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-2---install-gitlab&quot;&gt;Step 2 - Install Gitlab&lt;/h1&gt;

&lt;p&gt;In this step, we will install GitLab using the omnibus packages. Omnibus will install all packages, services, and tools required for running GitLab on your server.&lt;/p&gt;

&lt;p&gt;Add GitLab repository with the curl command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-term.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then install GitLab CE Community Edition with the apt command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install gitlab-ce&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wait for the server to download and install the gitlab package. When the installation is complete, you will see the results as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-nano.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-3---configure-gitlab-main-url&quot;&gt;Step 3 - Configure Gitlab Main URL&lt;/h1&gt;

&lt;p&gt;Now we should configure the URL that will be used to access our GitLab server. I will use the domain name ‘gitlab.hakase-labs.co’ for the GitLab URL here (please choose your own domain name) and I’ll use HTTPS for users access security.&lt;/p&gt;

&lt;p&gt;The main configuration of GitLab is in the ‘/etc/gitlab’ directory. Go to that directory and edit the configuration file ‘gitlab.rb’ with vim.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /etc/gitlab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim gitlab.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the GitLab configuration go to line 9 ‘external_url’ and change the URL to your URL ‘gitlab.hakase-labs.co’.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;external_url 'http://gitlab.hakase-labs.co'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save the file and exit the editor. In the next step will enable HTTPS for GitLab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-r.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-4---generate-ssl-lets-encrypt-and-dhparam-certificate&quot;&gt;Step 4 - Generate SSL Let’s encrypt and DHPARAM Certificate&lt;/h1&gt;

&lt;p&gt;In this step, we will enable the HTTPS protocol for GitLab. I will use a free SSL certificates provided by let’s encrypt for the gitlab domain name.&lt;/p&gt;

&lt;p&gt;Install letsencrypt command-line tool with apt command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install letsencrypt -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the installation is complete, generate a new certificate for the gitlab domain name with the command below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt certonly -d gitlab.hakase-labs.co&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enter your email address for the SSL certificate renew notification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-image.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose ‘Agree’ for the Let’s Encrypt Terms of Services and wait.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-image-2.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When it’s done, you will see the result below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-0.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;New Let’s encrypt certificate files for GitLab have been generated. You can find the certificate files in the ‘/etc/letsencrypt/live’ directory.&lt;/p&gt;

&lt;p&gt;Next, create a new directory named ‘ssl’ under the GitLab configuration directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p /etc/gitlab/ssl/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And generate dhparam pem files in the ssl directory with the openssl command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo openssl dhparam -out /etc/gitlab/ssl/dhparams.pem 2048&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-8.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now change the permissions of the certificate files to 600.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 /etc/gitlab/ssl/*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The SSL Let’s encrypt cert for GitLab and the DHPARAM certificate has been generated.&lt;/p&gt;

&lt;h1 id=&quot;step-5---enable-nginx-https-for-gitlab&quot;&gt;Step 5 - Enable Nginx HTTPS for GitLab&lt;/h1&gt;

&lt;p&gt;At this stage, we have the certificate files from Letsencrypt in ‘/etc/letsencrypt/live’ directory and the DHPARAM certificate in the ‘/etc/gitlab/ssl’ directory.&lt;/p&gt;

&lt;p&gt;In this step, we will configure a GitLab to use our certificate files. Go to the ‘/etc/gitlab’ directory, then edit ‘gitlab.rb’ configuration with vim.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/gitlab/
vim gitlab.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the external url to use ‘https’ instead of ‘http’.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;external_url 'https://gitlab.hakase-labs.co'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then add the new SSL configuration for gitlab as below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
nginx[&lt;span class=&quot;s1&quot;&gt;'redirect_http_to_https'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;nginx[&lt;span class=&quot;s1&quot;&gt;'ssl_certificate'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/letsencrypt/live/gitlab.hakase-labs.co/fullchain.pem&quot;&lt;/span&gt;
nginx[&lt;span class=&quot;s1&quot;&gt;'ssl_certificate_key'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/letsencrypt/live/gitlab.hakase-labs.co/privkey.pem&quot;&lt;/span&gt;
nginx[&lt;span class=&quot;s1&quot;&gt;'ssl_dhparam'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/gitlab/ssl/dhparams.pem&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
We will enable HTTP to HTTPS redirect in gitlab.gitlab-las.png

Save the file and exit vim.
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-las.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to run the command below as root to apply the new gitlab configuration.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see the results as below.
&lt;img src=&quot;../assets/blog-img/gitlab-90.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTPS Configuration for GitLab has been completed.&lt;/p&gt;

&lt;h1 id=&quot;step-6---configure-ufw-firewall&quot;&gt;Step 6 - Configure UFW Firewall&lt;/h1&gt;

&lt;p&gt;In this step, we will enable the UFW firewall. It’s already installed on the system, we just need to start the service. We will run GitLab behind the UFW firewall, so we must open the HTTP and HTTPS ports.&lt;/p&gt;

&lt;p&gt;Enable UFW firewall with the command below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ufw enable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command will run ufw service and add it to start automatically at the boot time.&lt;/p&gt;

&lt;p&gt;Next, open new ports ssh, HTTP, and HTTPS.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	ufw allow ssh
	ufw allow http
	ufw allow https
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/blog-img/gitlab-21.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now check the firewall status and make sure ssh, http, and https ports is on the list.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ufw status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HTTP and HTTPS ports are configured.&lt;/p&gt;</content><author><name>philip mutua</name><email>pmutua@live.com</email></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2018/06/26/2018-07-06-How-to-create-your-first-Django-library/" rel="alternate" type="text/html" title="" /><published>2018-06-26T09:39:43+03:00</published><updated>2018-06-26T09:39:43+03:00</updated><id>http://localhost:4000/2018/06/26/2018-07-06-How%20to%20create%20your%20first%20Django%20library</id><content type="html" xml:base="http://localhost:4000/2018/06/26/2018-07-06-How-to-create-your-first-Django-library/">&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;h3 id=&quot;how-to-create-your-first-django-library&quot;&gt;How to create your first Django library&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Create your application&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Packaging&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Way to run tests without projects&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Use tox
        &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the end, the layout of the package will be like this:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;django-myapp
|-- __init__.py
|-- MANIFEST.in
|-- README.rst
|-- LICENSE
|-- setup.py
|-- test_settings.py
|-- myapp
|   |-- __init__.py
|   |-- models.py
|   |-- views.py
|   &lt;span class=&quot;sb&quot;&gt;`-- tests.py
`&lt;/span&gt;-- tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whole example project described on this page is on Github: &lt;a href=&quot;https://github.com/hirokiky/django-myapp&quot;&gt;django-myapp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This guide includes about packaging or python environments. If you have created couple of python libraries, you can skip over some steps to &lt;a href=&quot;http://hirokiky.org/tech/create_django_library.html#way-to-run-django-app-tests&quot;&gt;3. Way to run tests without projects&lt;/a&gt;. But at least, I expect you to finish the tutorial of &lt;a href=&quot;https://docs.djangoproject.com/&quot;&gt;django’s document&lt;/a&gt; and create some apps.&lt;/p&gt;

&lt;h1 id=&quot;1-create-your-application&quot;&gt;1. Create your application&lt;/h1&gt;

&lt;p&gt;When you create third-party library, you won’t need to create a project. Just create your application by using startapp sub-command. But wait. you will distribute this application, so you need a parent directory to package it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;django-myapp
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;django-myapp
django-admin.py startapp myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, just it. Write your codes as same as way you learned at tutorial. “Can’t run tests”…? Yeah, I know it. and I’ll show you about it later.&lt;/p&gt;

&lt;p&gt;And you need to write README and LICENSE file to describe about your package. I won’t use packages without README or documentation:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;README.rst
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;LICENSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also It’s good idea to manage packages by using some VCS like git:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-packaging&quot;&gt;2. Packaging&lt;/h1&gt;

&lt;p&gt;To distribute your app/lib, make it as a package. Just thing you need to do is putting setup.py file under the django-myapp directory meaning next to myapp directory.&lt;/p&gt;

&lt;p&gt;The contents of this file will contain information about your package, name, version, description, required packages, and so on:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;README&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'README.rst'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django-myapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A line of description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;long_description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;README&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourname@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://github.com/yourname/django-myapp/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MIT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;install_requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Django&amp;gt;=1.6,&amp;lt;1.7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I recommend you to write them at least.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;
	The name of package like django-cms. This name will use when you specify the package by pip. So if you name it as django-myapp, users will type pip install django-myapp.
&lt;strong&gt;version&lt;/strong&gt;
	Version of you package. I recommend to follow semantic versioning
&lt;strong&gt;packages&lt;/strong&gt;
	List of python modules you want to contain. Basically, It’s enough to specify the django application you created.
&lt;strong&gt;description&lt;/strong&gt;
	A line of description. It will be used, for example, on package list of PyPI.
&lt;strong&gt;long_description&lt;/strong&gt;
	Lines of description. Basically it’s good idea to use README file as long_description. This will be used the package page of PyPI like here django-reportmail
&lt;strong&gt;author&lt;/strong&gt;
	Your name.
&lt;strong&gt;author_email&lt;/strong&gt;
	Your email address
&lt;strong&gt;url&lt;/strong&gt;
	A URL for your web site of the package. Basically, it’s enough to put the URL for your repository on Github and so.
&lt;strong&gt;license&lt;/strong&gt;
	The name of license you want to use. I always specify ‘MIT’ meaning the MIT license
&lt;strong&gt;install_requires&lt;/strong&gt;
	A list of packages that your packages require. It’s django package, so it’s necessary to write ‘Django’ at least.&lt;/p&gt;

&lt;p&gt;All right cool ;)&lt;/p&gt;

&lt;p&gt;And then, It requires &lt;code class=&quot;highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; file on the project directory to specify which files you want to distribute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.ini &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.cfg &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.rst
recursive-include myapp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.ico &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.png &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.css &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gif &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.html &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without this file, templates of your application won’t be included the package. For more detail, refer &lt;a href=&quot;https://docs.python.org/3.3/distutils/sourcedist.html#specifying-the-files-to-distribute&quot;&gt;official doc about specifying the files to distribute&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s over. After created &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;, run this command to register this new package for development:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python setup.py develop&lt;/code&gt;
For more detail about setup.py, please refer another documents or packages. Python &lt;a href=&quot;http://python-packaging-user-guide.readthedocs.org/&quot;&gt;Packaging User Guide&lt;/a&gt; will help you. And I imitated setup.py of some another packages. Actually I haven’t read documents so much.&lt;/p&gt;

&lt;p&gt;If you want to upload your package to PyPI. just register the application and upload:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python setup.py register
python setup.py sdist upload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the second time, it’s enough to run the second line. Also you can refer the doc about uploading on Python Packaging User Guide&lt;/p&gt;

&lt;h1 id=&quot;3-way-to-run-tests-without-projects&quot;&gt;3. Way to run tests without projects&lt;/h1&gt;
&lt;p&gt;Basically django always requires ‘projects’ for all of actions. then how can we run tests? actually It’s easy, you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin.py&lt;/code&gt; command and specify settings file for testing. First, create the settings for testing on the project root:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch test_settings.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the contents of the file will be like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'myapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;':memory:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;secret_key_for_testing&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ya, it’s easy. Of cause you can put some additional settings to correspond to tests of your application. And this article about &lt;a href=&quot;http://www.machinalis.com/blog/optimizing-your-tests-in-django/&quot;&gt;optimizing your tests in Django&lt;/a&gt; will be helpful.&lt;/p&gt;

&lt;p&gt;To run the test by using the setting, type this command at the project root:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin.py test --settings=test_settings&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-use-tox&quot;&gt;4. Use tox&lt;/h1&gt;

&lt;p&gt;If you want the package to support multiple versions of Python or Django, It’s the best idea to use &lt;a href=&quot;https://pypi.python.org/pypi/tox&quot;&gt;tox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let’s consider a case which supporting two versions of Python, Python2.7 and Python3.3. Put a file name tox.ini on the package root:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch tox.ini&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then, write setting like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tox]
envlist &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; py27, py33, flake8

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;testenv]
commands &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
    django-admin.py &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;test_settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run those tests, install tox and type like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tox
tox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Three bunches of tests will run. tests with Python2.7, Python3.3 and flake8 testing to check syntax of your codes.&lt;/p&gt;

&lt;p&gt;For more about tox and flake8, refer the official documentations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tox.readthedocs.org/en/latest/&quot;&gt;tox documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/flake8&quot;&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It’s over.&lt;/p&gt;

&lt;p&gt;If you have some question or want to point out my mistake please Contact me on &lt;a href=&quot;http://twitter.com/itsphilipmutua&quot;&gt;twitter&lt;/a&gt;. I’ll answer and fix this page as soon as I can.&lt;/p&gt;

&lt;p&gt;For more detail about git, refer the &lt;a href=&quot;http://git-scm.com/&quot;&gt;git official site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>philip mutua</name><email>pmutua@live.com</email></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2018/06/26/2018-07-06-How-to-create-your-first-Django-library-(another-copy)/" rel="alternate" type="text/html" title="" /><published>2018-06-26T09:39:43+03:00</published><updated>2018-06-26T09:39:43+03:00</updated><id>http://localhost:4000/2018/06/26/2018-07-06-How%20to%20create%20your%20first%20Django%20library%20(another%20copy)</id><content type="html" xml:base="http://localhost:4000/2018/06/26/2018-07-06-How-to-create-your-first-Django-library-(another-copy)/">&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;p&gt;Command line instructions&lt;/p&gt;

&lt;p&gt;Git global setup
git config –global user.name “Philip Mutua”
git config –global user.email “pmutua@live.com”&lt;/p&gt;

&lt;p&gt;Create a new repository
git clone 
https://gitlab.com/pmutua/agiza.git&lt;/p&gt;

&lt;p&gt;cd agiza
touch README.md
git add README.md
git commit -m “add README”
git push -u origin master&lt;/p&gt;

&lt;p&gt;Existing folder
cd existing_folder
git init
git remote add origin 
https://gitlab.com/pmutua/agiza.git&lt;/p&gt;

&lt;p&gt;git add .
git commit -m “Initial commit”
git push -u origin master&lt;/p&gt;

&lt;p&gt;Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin 
https://gitlab.com/pmutua/agiza.git
git push -u origin –all
git push -u origin –tags&lt;/p&gt;</content><author><name>philip mutua</name><email>pmutua@live.com</email></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2018/06/26/2018-07-06-Git-tip-Show-your-branch-name-on-the-Linux-prompt/" rel="alternate" type="text/html" title="" /><published>2018-06-26T09:39:43+03:00</published><updated>2018-06-26T09:39:43+03:00</updated><id>http://localhost:4000/2018/06/26/2018-07-06-Git%20tip:%20Show-%20your%20-branch-%20name%20-on%20-the%20-Linux-%20prompt</id><content type="html" xml:base="http://localhost:4000/2018/06/26/2018-07-06-Git-tip-Show-your-branch-name-on-the-Linux-prompt/">&lt;p&gt;Git is one of the most popular Source Control Management (SCM) software packages to provide revision control. Subversion (aka SVN) and Mercurial are other popular systems. These systems organize source code in branches and revisions that can be named by means of tagging. Branches can be used to allow you to work on different versions of the software concurrently. A popular way of organizing is to create a branch for every major feature you are building. Another organization can be used to distinguish between a “development” and “production” version, so that you can easily apply a small code change in case of any bugs.&lt;/p&gt;

&lt;p&gt;In any of the above schemes it is important to know which branch you are working on, when committing code to the repository. This post explains how you can add the branch name in red to the prompt.&lt;/p&gt;

&lt;p&gt;Firstly, we have to turn on the colored prompt in “.bashrc”:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# uncomment for a colored prompt, if the terminal has the capability; turned&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# off by default to not distract the user: the focus in a terminal window&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# should be on the output of commands, not on the prompt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#force_color_prompt=yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now add the following code to “.bashrc” for Git branch information:&lt;/p&gt;

&lt;p&gt;```bash&lt;/p&gt;

&lt;h1 id=&quot;add-git-branch-if-its-present-to-bashrc-file&quot;&gt;Add git branch if its present to .bashrc file&lt;/h1&gt;
&lt;h1 id=&quot;show-git-branch-name&quot;&gt;Show git branch name&lt;/h1&gt;
&lt;p&gt;force_color_prompt=yes
color_prompt=yes
parse_git_branch() {
 git branch 2&amp;gt; /dev/null | sed -e ‘/^[^&lt;em&gt;]/d’ -e ‘s/&lt;/em&gt; (.*)/(\1)/’
}
if [ “$color_prompt” = yes ]; then
 PS1=’${debian_chroot:+($debian_chroot)}[\033[01;32m]\u@\h[\033[00m]:[\033[01;34m]\w[\033[01;31m]$(parse_git_branch)[\033[00m]$ ‘
else
 PS1=’${debian_chroot:+($debian_chroot)}\u@\h:\w$(parse_git_branch)$ ‘
fi
unset color_prompt force_color_prompt&lt;/p&gt;

&lt;p&gt;With this change you will be less likely to commit your code to the wrong branch. Enjoy!&lt;/p&gt;</content><author><name>philip mutua</name><email>pmutua@live.com</email></author></entry><entry><title type="html">Documenting Your Django Application with Sphinx.</title><link href="http://localhost:4000/2018/06/05/How-do-I-determine-the-serial-number-of-a-computer-using-the-operating-system/" rel="alternate" type="text/html" title="Documenting Your Django Application with Sphinx." /><published>2018-06-05T00:00:00+03:00</published><updated>2018-06-05T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/05/How%20do%20I%20determine%20the%20serial%20number%20of%20a%20computer%20using%20the%20operating%20system</id><content type="html" xml:base="http://localhost:4000/2018/06/05/How-do-I-determine-the-serial-number-of-a-computer-using-the-operating-system/">&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">Find out more by visiting the project on GitHub.</summary></entry><entry><title type="html">Documenting Your Django Application with Sphinx.</title><link href="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx/" rel="alternate" type="text/html" title="Documenting Your Django Application with Sphinx." /><published>2018-06-04T00:00:00+03:00</published><updated>2018-06-04T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/04/documenting-%20your%20django%20-application-with%20sphinx</id><content type="html" xml:base="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx/">&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">Find out more by visiting the project on GitHub.</summary></entry><entry><title type="html">Documenting Your Django Application with Sphinx.</title><link href="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx-(copy)/" rel="alternate" type="text/html" title="Documenting Your Django Application with Sphinx." /><published>2018-06-04T00:00:00+03:00</published><updated>2018-06-04T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/04/documenting-%20your%20django%20-application-with%20sphinx%20(copy)</id><content type="html" xml:base="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx-(copy)/">&lt;p&gt;install &lt;a href=&quot;&quot;&gt;sphinx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Python 3
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install sphinx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Python 2&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your django project&lt;/p&gt;

&lt;p&gt;Make a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; docs&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;  to docs&lt;/p&gt;

&lt;p&gt;run &lt;code class=&quot;highlighter-rouge&quot;&gt;sphinx-quckstart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then configure your &lt;code class=&quot;highlighter-rouge&quot;&gt;conf.py&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DJANGO_SETTINGS_MODULE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mis.settings'&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside your doc folder generate your &lt;code class=&quot;highlighter-rouge&quot;&gt;.rst&lt;/code&gt; files&lt;/p&gt;

&lt;p&gt;For example you have an application called &lt;code class=&quot;highlighter-rouge&quot;&gt;hr&lt;/code&gt; you would like to import everything to document&lt;/p&gt;

&lt;p&gt;you will run &lt;code class=&quot;highlighter-rouge&quot;&gt;sphinx-apidoc -o source ../hr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then to make them availabe in the index file add them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.rst&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.. ERP documentation master file, created by
   sphinx-quickstart on Wed Jun 13 11:40:12 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root &lt;span class=&quot;sb&quot;&gt;`toctree`&lt;/span&gt; directive.

&lt;span class=&quot;gu&quot;&gt;Welcome to ERP's documentation!
===============================
&lt;/span&gt;
.. toctree::
   :maxdepth: 2
   :caption: Contents:

   source/modules&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;Indices and tables
==================
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; :ref:&lt;span class=&quot;sb&quot;&gt;`genindex`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; :ref:&lt;span class=&quot;sb&quot;&gt;`modindex`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; :ref:&lt;span class=&quot;sb&quot;&gt;`search`&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">install sphinx</summary></entry><entry><title type="html">Documenting Your Django Application with Sphinx.</title><link href="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx-(another-copy)/" rel="alternate" type="text/html" title="Documenting Your Django Application with Sphinx." /><published>2018-06-04T00:00:00+03:00</published><updated>2018-06-04T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/04/documenting-%20your%20django%20-application-with%20sphinx%20(another%20copy)</id><content type="html" xml:base="http://localhost:4000/2018/06/04/documenting-your-django-application-with-sphinx-(another-copy)/">&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">Find out more by visiting the project on GitHub.</summary></entry><entry><title type="html">How To Install and Use Docker on Ubuntu 16.04</title><link href="http://localhost:4000/2018/06/03/How-To-Install-and-Use-Docker-on-Ubuntu-16.04-.md/" rel="alternate" type="text/html" title="How To Install and Use Docker on Ubuntu 16.04" /><published>2018-06-03T00:00:00+03:00</published><updated>2018-06-03T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/03/How%20To%20Install%20and%20Use%20Docker%20on%20Ubuntu%2016.04%20.md</id><content type="html" xml:base="http://localhost:4000/2018/06/03/How-To-Install-and-Use-Docker-on-Ubuntu-16.04-.md/">&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;To follow this tutorial, you will need the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;64-bit Ubuntu 16.04 server&lt;/li&gt;
  &lt;li&gt;Non-root user with sudo privileges Initial Setup Guide for Ubuntu 16.04 explains how to set this up.)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  Note: Docker requires a 64-bit version of Ubuntu as well as a kernel version equal to or greater than 3.10. The default 64-bit Ubuntu 16.04 server meets these requirements.
&lt;/blockquote&gt;

&lt;p&gt;All the commands in this tutorial should be run as a non-root user. If root access is required for the command, it will be preceded by &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;. &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04&quot;&gt;Initial Setup Guide for Ubuntu 16.04&lt;/a&gt; explains how to add users and give them sudo access.&lt;/p&gt;

&lt;h1 id=&quot;step-1--installing-docker&quot;&gt;Step 1 — Installing Docker&lt;/h1&gt;

&lt;p&gt;The Docker installation package available in the official Ubuntu 16.04 repository may not be the latest version. To get the latest and greatest version, install Docker from the official Docker repository. This section shows you how to do just that.&lt;/p&gt;

&lt;p&gt;First, add the GPG key for the official Docker repository to the system:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the Docker repository to APT sources:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, update the package database with the Docker packages from the newly added repo:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see output similar to the follow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output of apt-cache policy docker-ce

docker-ce:
  Installed: (none)
  Candidate: 17.03.1~ce-0~ubuntu-xenial
  Version table:
     17.03.1~ce-0~ubuntu-xenial 500
        500 https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
     17.03.0~ce-0~ubuntu-xenial 500
        500 https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-ce&lt;/code&gt; is not installed, but the candidate for installation is from the Docker repository for Ubuntu 16.04. The &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-ce&lt;/code&gt; version number might be different.&lt;/p&gt;

&lt;p&gt;Finally, install Docker:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install -y docker-ce&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">Prerequisites</summary></entry><entry><title type="html">Documenting Your Django Application with Sphinx.</title><link href="http://localhost:4000/2018/06/03/documenting-your-django-application-with-sphinx/" rel="alternate" type="text/html" title="Documenting Your Django Application with Sphinx." /><published>2018-06-03T00:00:00+03:00</published><updated>2018-06-03T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/03/documenting-%20your%20django%20-application-with%20sphinx</id><content type="html" xml:base="http://localhost:4000/2018/06/03/documenting-your-django-application-with-sphinx/">&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/go&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Philip Mutua</name><email>pmutua@live.com</email></author><category term="tutorial" /><summary type="html">Find out more by visiting the project on GitHub.</summary></entry></feed>